(in-package #:jfh-user)

(defclass application-user (jfh-store:user-settings)
  ((%user-login
    :reader user-login
    :initarg :user-login)) ;; TODO can we move this to application-secure-user and just make this a "forwarding" class?
  (:documentation "Application user info - the very bare minimum."))

(defclass application-password ()
  ((%user-password
    :reader user-password
    :initarg :user-password
    :initform "")
   (%salt
    :reader salt
    :initarg :salt
    :initform ""))
  (:documentation "Application password."))

(defclass application-fingerprint ()
  ((%user-fingerprint
    :reader user-fingerprint
    :initarg :user-fingerprint
    :initform #()))
  (:documentation "Application fingerprint."))

(defclass application-api-key ()
  ((%user-api-key
    :reader user-api-key
    :initarg :user-api-key
    :initform ""))
  (:documentation "Application API Key."))

(defclass application-secure-user (application-user application-password application-fingerprint application-api-key)
  ((%user-mfa-key
    :reader user-mfa-key
    :initarg :user-mfa-key
    :initform ""))
  (:documentation "Application user secure info."))

(defclass application-meta-user (application-user)
  ((%create-date
    :reader create-date
    :initarg :create-date
    :initform (get-universal-time))
   (%disable
    :reader disable
    :initarg :disable
    :initform nil))
  (:documentation "Application user info with meta-data."))

(defclass application-user-identifier (jfh-store:user-index)
  ()
  (:documentation "User identifier. Base class for the different kinds of user identifiers. This is based on the assumption that user information is keyed to from 1 piece of input."))

(defclass application-user-login (application-user-identifier)
  ((%user-login
    :reader user-login
    :initarg :user-login))
  (:documentation "User login. Meant for what a user interactively inputs as their User Login."))

(defclass application-user-id (application-user-identifier)
  ()
  (:documentation "User ID. Meant for an **internal** user ID that a user typically would not see in a UI."))

(defclass application-user-api-key (application-user-identifier)
  ((%user-api-key
    :reader user-api-key
    :initarg :user-api-key))
  (:documentation "User API key. Meant for an API key generated by the application that a client would then use in an HTTP request to identify itself, or its user."))

(defclass application-user-fingerprint (application-user-identifier)
  ((%user-fingerprint
    :reader user-fingerprint
    :initarg :user-fingerprint
    ;; :type simple-vector
    ))
  (:documentation "User fingerprint. Meant as the fingerprint / thumbprint of an SSL certificate generated by the application that a client would then use in an HTTP request to identify itself, or its user."))

(defclass user-login-index-entry (jfh-store::user-login-index application-user-login)
  ()
  (:documentation "User index entry. Link User ID to persisted data."))

(defclass user-fingerprint-index-entry (jfh-store::user-fingerprint-index application-user-fingerprint)
  ()
  (:documentation "User index entry. Link User ID to persisted data."))

(defclass user-api-key-index-entry (jfh-store::user-api-key-index application-user-api-key)
  ()
  (:documentation "User index entry. Link User ID to persisted data."))

(defgeneric get-user-index-entry (user-login)
  (:documentation "Input: User name (login). Output: user index entry."))

(defgeneric get-user-info (user-identifier)
  (:documentation "Input: something that uniquely identifies a user. Output: application-meta-user"))

(defgeneric get-secure-user-info (user-identifier)
  (:documentation "Input: something that uniquely identifies a user. Output: application-secure-user."))

(defgeneric save-index (application-secure-user)
  (:documentation "Input: object with secure info. Output: ?"))

(defgeneric make-user-login-index-entry (application-secure-user)
  (:documentation "Input: application-secure-user. Output: user login index entry."))

(defgeneric make-user-fingerprint-index-entry (application-secure-user)
  (:documentation "Input: application-secure-user. Output: user fingerprint index entry."))
 
(defgeneric make-user-api-key-index-entry (application-secure-user)
  (:documentation "Input: application-secure-user. Output: user API key index entry."))

(defgeneric save-application-user (application-user)
  (:documentation "Input: application-user. Output: application-user. Persist application user info."))

(defgeneric save-new-application-user (application-user)
  (:documentation "Input: application-user. Output: application-user. Persist *NEW* application user info."))

(defgeneric hash-password (application-security)
  (:documentation "Input: plaintext password / fingerprint / API Key. Output: Encrypted cipher (string)."))
